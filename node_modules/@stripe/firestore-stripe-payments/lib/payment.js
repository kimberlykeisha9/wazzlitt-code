/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { collection, doc, getDoc, getDocs, getFirestore, onSnapshot, query, where, } from "@firebase/firestore";
import { StripePaymentsError } from "./init";
import { getCurrentUser, getCurrentUserSync } from "./user";
import { checkNonEmptyArray, checkNonEmptyString } from "./utils";
/**
 * Retrieves an existing Stripe payment for the currently signed in user from the database.
 *
 * @param payments - A valid {@link StripePayments} object.
 * @param subscriptionId - ID of the payment to retrieve.
 * @returns Resolves with a Payment object if found. Rejects if the specified payment ID
 *  does not exist, or if the user is not signed in.
 */
export function getCurrentUserPayment(payments, paymentId) {
    checkNonEmptyString(paymentId, "paymentId must be a non-empty string.");
    return getCurrentUser(payments).then((uid) => {
        const dao = getOrInitPaymentDAO(payments);
        return dao.getPayment(uid, paymentId);
    });
}
export function getCurrentUserPayments(payments, options) {
    const queryOptions = {};
    if (typeof (options === null || options === void 0 ? void 0 : options.status) !== "undefined") {
        queryOptions.status = getStatusAsArray(options.status);
    }
    return getCurrentUser(payments).then((uid) => {
        const dao = getOrInitPaymentDAO(payments);
        return dao.getPayments(uid, queryOptions);
    });
}
/**
 * Registers a listener to receive payment update events for the currently signed in
 * user. If the user is not signed in throws an `unauthenticated` error, and no listener is
 * registered.
 *
 * Upon successful registration, the `onUpdate` callback will fire once with
 * the current state of all the payments. From then onwards, each update to a payment
 * will fire the `onUpdate` callback with the latest state of the payments.
 *
 * @param payments - A valid {@link StripePayments} object.
 * @param onUpdate - A callback that will fire whenever the current user's payments
 *   are updated.
 * @param onError - A callback that will fire whenever an error occurs while listening to
 *   payment updates.
 * @returns A function that can be called to cancel and unregister the listener.
 */
export function onCurrentUserPaymentUpdate(payments, onUpdate, onError) {
    const uid = getCurrentUserSync(payments);
    const dao = getOrInitPaymentDAO(payments);
    return dao.onPaymentUpdate(uid, onUpdate, onError);
}
function getStatusAsArray(status) {
    if (typeof status === "string") {
        return [status];
    }
    checkNonEmptyArray(status, "status must be a non-empty array.");
    return status;
}
const PAYMENT_CONVERTER = {
    toFirestore: () => {
        throw new Error("Not implemented for readonly Payment type.");
    },
    fromFirestore: (snapshot) => {
        var _a;
        const data = snapshot.data();
        const refs = data.prices;
        const prices = refs.map((priceRef) => {
            return {
                product: priceRef.parent.parent.id,
                price: priceRef.id,
            };
        });
        return {
            amount: data.amount,
            amount_capturable: data.amount_capturable,
            amount_received: data.amount_received,
            created: toUTCDateString(data.created),
            currency: data.currency,
            customer: data.customer,
            description: data.description,
            id: snapshot.id,
            invoice: data.invoice,
            metadata: (_a = data.metadata) !== null && _a !== void 0 ? _a : {},
            payment_method_types: data.payment_method_types,
            prices,
            status: data.status,
            uid: snapshot.ref.parent.parent.id,
        };
    },
};
function toUTCDateString(seconds) {
    const date = new Date(seconds * 1000);
    return date.toUTCString();
}
const PAYMENTS_COLLECTION = "payments";
class FirestorePaymentDAO {
    constructor(app, customersCollection) {
        this.customersCollection = customersCollection;
        this.firestore = getFirestore(app);
    }
    getPayment(uid, paymentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const snap = yield this.getPaymentSnapshotIfExists(uid, paymentId);
            return snap.data();
        });
    }
    getPayments(uid, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const querySnap = yield this.getPaymentSnapshots(uid, options === null || options === void 0 ? void 0 : options.status);
            const payments = [];
            querySnap.forEach((snap) => {
                payments.push(snap.data());
            });
            return payments;
        });
    }
    onPaymentUpdate(uid, onUpdate, onError) {
        const payments = collection(this.firestore, this.customersCollection, uid, PAYMENTS_COLLECTION).withConverter(PAYMENT_CONVERTER);
        return onSnapshot(payments, (querySnap) => {
            const snapshot = {
                payments: [],
                changes: [],
                size: querySnap.size,
                empty: querySnap.empty,
            };
            querySnap.forEach((snap) => {
                snapshot.payments.push(snap.data());
            });
            querySnap.docChanges().forEach((change) => {
                snapshot.changes.push({
                    type: change.type,
                    payment: change.doc.data(),
                });
            });
            onUpdate(snapshot);
        }, (err) => {
            if (onError) {
                const arg = new StripePaymentsError("internal", `Error while listening to database updates: ${err.message}`, err);
                onError(arg);
            }
        });
    }
    getPaymentSnapshotIfExists(uid, paymentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const paymentRef = doc(this.firestore, this.customersCollection, uid, PAYMENTS_COLLECTION, paymentId).withConverter(PAYMENT_CONVERTER);
            const snapshot = yield this.queryFirestore(() => getDoc(paymentRef));
            if (!snapshot.exists()) {
                throw new StripePaymentsError("not-found", `No payment found with the ID: ${paymentId} for user: ${uid}`);
            }
            return snapshot;
        });
    }
    getPaymentSnapshots(uid, status) {
        return __awaiter(this, void 0, void 0, function* () {
            let paymentsQuery = collection(this.firestore, this.customersCollection, uid, PAYMENTS_COLLECTION).withConverter(PAYMENT_CONVERTER);
            if (status) {
                paymentsQuery = query(paymentsQuery, where("status", "in", status));
            }
            return yield this.queryFirestore(() => getDocs(paymentsQuery));
        });
    }
    queryFirestore(fn) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield fn();
            }
            catch (error) {
                throw new StripePaymentsError("internal", "Unexpected error while querying Firestore", error);
            }
        });
    }
}
const PAYMENT_DAO_KEY = "payment-dao";
function getOrInitPaymentDAO(payments) {
    let dao = payments.getComponent(PAYMENT_DAO_KEY);
    if (!dao) {
        dao = new FirestorePaymentDAO(payments.app, payments.customersCollection);
        setPaymentDAO(payments, dao);
    }
    return dao;
}
/**
 * Internal API for registering a {@link PaymentDAO} instance with {@link StripePayments}.
 * Exported for testing.
 *
 * @internal
 */
export function setPaymentDAO(payments, dao) {
    payments.setComponent(PAYMENT_DAO_KEY, dao);
}
//# sourceMappingURL=payment.js.map