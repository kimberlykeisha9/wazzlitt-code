import { FirebaseApp } from "@firebase/app";
/**
 * Serves as the main entry point to this library. Initializes the client SDK,
 * and returns a handle object that can be passed into other APIs.
 *
 * @param app - A FirebaseApp instance initialized by the Firebase JS SDK.
 * @param options - Configuration options for the SDK.
 * @returns An instance of the StripePayments class.
 */
export declare function getStripePayments(app: FirebaseApp, options: StripePaymentsOptions): StripePayments;
/**
 * Configuration options that indicate how the Stripe payments extension has been set up.
 */
export interface StripePaymentsOptions {
    customersCollection: string;
    productsCollection: string;
}
/**
 * Holds the configuration and other state information of the SDK. An instance of this class
 * must be passed to almost all the other APIs of this library. Do not directly call the
 * constructor. Use the {@link getStripePayments} function to obtain an instance.
 */
export declare class StripePayments {
    readonly app: FirebaseApp;
    private readonly options;
    private readonly components;
    private constructor();
    /**
     * Name of the customers collection as configured in the extension.
     */
    get customersCollection(): string;
    /**
     * Name of the products collection as configured in the extension.
     */
    get productsCollection(): string;
}
/**
 * Union of possible error codes.
 */
export declare type StripePaymentsErrorCode = "deadline-exceeded" | "not-found" | "permission-denied" | "unauthenticated" | "internal";
/**
 * An error thrown by this SDK.
 */
export declare class StripePaymentsError extends Error {
    readonly code: StripePaymentsErrorCode;
    readonly message: string;
    readonly cause?: any;
    constructor(code: StripePaymentsErrorCode, message: string, cause?: any);
}
//# sourceMappingURL=init.d.ts.map