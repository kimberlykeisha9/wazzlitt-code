/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { addDoc, collection, getFirestore, onSnapshot, } from "@firebase/firestore";
import { StripePaymentsError } from "./init";
import { getCurrentUser } from "./user";
import { checkNonEmptyArray, checkNonEmptyString, checkPositiveNumber, } from "./utils";
function hasLineItems(params) {
    return "line_items" in params;
}
export const CREATE_SESSION_TIMEOUT_MILLIS = 30 * 1000;
/**
 * Creates a new Stripe checkout session with the given parameters. Returned session contains a
 * session ID and a session URL that can be used to redirect the user to complete the checkout.
 * User must be currently signed in with Firebase Auth to call this API. If a timeout occurs
 * while waiting for the session to be created and acknowledged by Stripe, rejects with a
 * `deadline-exceeded` error. Default timeout duration is {@link CREATE_SESSION_TIMEOUT_MILLIS}.
 *
 * @param payments - A valid {@link StripePayments} object.
 * @param params - Parameters of the checkout session.
 * @param options - Optional settings to customize the behavior.
 * @returns Resolves with the created Stripe Session object.
 */
export function createCheckoutSession(payments, params, options) {
    params = Object.assign({}, params);
    checkAndUpdateCommonParams(params);
    if (hasLineItems(params)) {
        checkLineItemParams(params);
    }
    else {
        checkPriceIdParams(params);
    }
    const timeoutMillis = getTimeoutMillis(options === null || options === void 0 ? void 0 : options.timeoutMillis);
    return getCurrentUser(payments).then((uid) => {
        const dao = getOrInitSessionDAO(payments);
        return dao.createCheckoutSession(uid, params, timeoutMillis);
    });
}
function checkAndUpdateCommonParams(params) {
    var _a;
    if (typeof params.cancel_url !== "undefined") {
        checkNonEmptyString(params.cancel_url, "cancel_url must be a non-empty string.");
    }
    else {
        params.cancel_url = window.location.href;
    }
    (_a = params.mode) !== null && _a !== void 0 ? _a : (params.mode = "subscription");
    if (typeof params.success_url !== "undefined") {
        checkNonEmptyString(params.success_url, "success_url must be a non-empty string.");
    }
    else {
        params.success_url = window.location.href;
    }
}
function checkLineItemParams(params) {
    checkNonEmptyArray(params.line_items, "line_items must be a non-empty array.");
}
function checkPriceIdParams(params) {
    checkNonEmptyString(params.price, "price must be a non-empty string.");
    if (typeof params.quantity !== "undefined") {
        checkPositiveNumber(params.quantity, "quantity must be a positive integer.");
    }
}
function getTimeoutMillis(timeoutMillis) {
    if (typeof timeoutMillis !== "undefined") {
        checkPositiveNumber(timeoutMillis, "timeoutMillis must be a positive number.");
        return timeoutMillis;
    }
    return CREATE_SESSION_TIMEOUT_MILLIS;
}
class FirestoreSessionDAO {
    constructor(app, customersCollection) {
        this.customersCollection = customersCollection;
        this.firestore = getFirestore(app);
    }
    createCheckoutSession(uid, params, timeoutMillis) {
        return __awaiter(this, void 0, void 0, function* () {
            const doc = yield this.addSessionDoc(uid, params);
            return this.waitForSessionId(doc, timeoutMillis);
        });
    }
    addSessionDoc(uid, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const sessions = collection(this.firestore, this.customersCollection, uid, "checkout_sessions");
            try {
                return yield addDoc(sessions, params);
            }
            catch (err) {
                throw new StripePaymentsError("internal", "Error while querying Firestore.", err);
            }
        });
    }
    waitForSessionId(doc, timeoutMillis) {
        let cancel;
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                reject(new StripePaymentsError("deadline-exceeded", "Timeout while waiting for session response."));
            }, timeoutMillis);
            cancel = onSnapshot(doc.withConverter(SESSION_CONVERTER), (snap) => {
                const session = snap.data();
                if (hasSessionId(session)) {
                    clearTimeout(timeout);
                    resolve(session);
                }
            }, (err) => {
                clearTimeout(timeout);
                reject(new StripePaymentsError("internal", "Error while querying Firestore.", err));
            });
        }).finally(() => cancel());
    }
}
function hasSessionId(session) {
    return typeof (session === null || session === void 0 ? void 0 : session.id) !== "undefined";
}
const SESSION_CONVERTER = {
    toFirestore: () => {
        throw new Error("Not implemented for readonly Session type.");
    },
    fromFirestore: (snapshot) => {
        const _a = snapshot.data(), { created, sessionId } = _a, rest = __rest(_a, ["created", "sessionId"]);
        if (typeof sessionId !== "undefined") {
            return Object.assign(Object.assign({}, rest), { id: sessionId, created_at: toUTCDateString(created) });
        }
        return Object.assign({}, rest);
    },
};
function toUTCDateString(timestamp) {
    return timestamp.toDate().toUTCString();
}
const SESSION_DAO_KEY = "checkout-session-dao";
function getOrInitSessionDAO(payments) {
    let dao = payments.getComponent(SESSION_DAO_KEY);
    if (!dao) {
        dao = new FirestoreSessionDAO(payments.app, payments.customersCollection);
        setSessionDAO(payments, dao);
    }
    return dao;
}
/**
 * Internal API for registering a {@link SessionDAO} instance with {@link StripePayments}.
 * Exported for testing.
 *
 * @internal
 */
export function setSessionDAO(payments, dao) {
    payments.setComponent(SESSION_DAO_KEY, dao);
}
//# sourceMappingURL=session.js.map