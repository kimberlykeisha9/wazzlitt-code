{"version":3,"file":"product.js","sourceRoot":"","sources":["../src/product.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from \"@firebase/app\";\nimport {\n  collection,\n  CollectionReference,\n  doc,\n  DocumentData,\n  DocumentReference,\n  DocumentSnapshot,\n  Firestore,\n  FirestoreDataConverter,\n  getDoc,\n  getDocs,\n  getFirestore,\n  limit,\n  query,\n  Query,\n  QueryConstraint,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  where,\n  WhereFilterOp,\n} from \"@firebase/firestore\";\nimport { StripePayments, StripePaymentsError } from \"./init\";\nimport { checkNonEmptyString } from \"./utils\";\n\n/**\n * Interface of a Stripe Product stored in the app database.\n */\nexport interface Product {\n  /**\n   * Unique Stripe product ID.\n   */\n  readonly id: string;\n\n  /**\n   * Whether the product is currently available for purchase.\n   */\n  readonly active: boolean;\n\n  /**\n   * The product's name, meant to be displayable to the customer. Whenever this product is sold\n   * via a subscription, name will show up on associated invoice line item descriptions.\n   */\n  readonly name: string;\n\n  /**\n   * The product's description, meant to be displayable to the customer. Use this field to\n   * optionally store a long form explanation of the product being sold for your own\n   * rendering purposes.\n   */\n  readonly description: string | null;\n\n  /**\n   * The Firebase role that will be assigned to the user if they are subscribed to this plan.\n   */\n  readonly role: string | null;\n\n  /**\n   * A list of up to 8 URLs of images for this product, meant to be displayable to the customer.\n   */\n  readonly images: string[];\n\n  /**\n   * A list of Prices for this billing product. Only populated if explicitly requested\n   * during retrieval.\n   */\n  readonly prices: Price[];\n\n  /**\n   * A collection of additional product metadata.\n   */\n  readonly metadata: { [key: string]: string | number | null };\n\n  readonly [propName: string]: any;\n}\n\n/**\n * Interface of a Stripe Price object stored in the app database.\n */\nexport interface Price {\n  /**\n   * Unique Stripe price ID.\n   */\n  readonly id: string;\n\n  /**\n   * ID of the Stripe product to which this price is related.\n   */\n  readonly product: string;\n\n  /**\n   * Whether the price can be used for new purchases.\n   */\n  readonly active: boolean;\n\n  /**\n   * Three-letter ISO currency code.\n   */\n  readonly currency: string;\n\n  /**\n   * The unit amount in cents to be charged, represented as a whole integer if possible.\n   */\n  readonly unit_amount: number | null;\n\n  /**\n   * A brief description of the price.\n   */\n  readonly description: string | null;\n\n  /**\n   * One of `one_time` or `recurring` depending on whether the price is for a one-time purchase\n   * or a recurring (subscription) purchase.\n   */\n  readonly type: \"one_time\" | \"recurring\";\n\n  /**\n   * The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.\n   */\n  readonly interval: \"day\" | \"month\" | \"week\" | \"year\" | null;\n\n  /**\n   * The number of intervals (specified in the {@link Price.interval} attribute) between\n   * subscription billings. For example, `interval=month` and `interval_count=3` bills every\n   * 3 months.\n   */\n  readonly interval_count: number | null;\n\n  /**\n   * Default number of trial days when subscribing a customer to this price using\n   * {@link https://stripe.com/docs/api#create_subscription-trial_from_plan | trial_from_plan}.\n   */\n  readonly trial_period_days: number | null;\n\n  readonly [propName: string]: any;\n}\n\n/**\n * Optional parameters for the {@link getProduct} function.\n */\nexport interface GetProductOptions {\n  /**\n   * Set to `true` to retrieve the prices along with a product. If not set, the product is\n   * returned with no prices (i.e. {@link Product.prices} field will be empty).\n   */\n  includePrices?: boolean;\n}\n\n/**\n * Retrieves a Stripe product from the database.\n *\n * @param payments - A valid {@link StripePayments} object.\n * @param productId - ID of the product to retrieve.\n * @param options - A set of options to customize the behavior.\n * @returns Resolves with a Stripe Product object if found. Rejects if the specified product ID\n *  does not exist.\n */\nexport function getProduct(\n  payments: StripePayments,\n  productId: string,\n  options?: GetProductOptions\n): Promise<Product> {\n  checkNonEmptyString(productId, \"productId must be a non-empty string.\");\n  const dao: ProductDAO = getOrInitProductDAO(payments);\n  return dao.getProduct(productId).then((product: Product) => {\n    if (options?.includePrices) {\n      return getProductWithPrices(dao, product);\n    }\n\n    return product;\n  });\n}\n\n/**\n * Optional parameters for the {@link getProducts} function.\n */\nexport interface GetProductsOptions {\n  /**\n   * Set to `true` to retrieve only the currently active set of Stripe products. If not set,\n   * returns all available products. When set, the effect is same as if called with the filter\n   * `[\"active\", \"==\", true]`.\n   */\n  activeOnly?: boolean;\n\n  /**\n   * An array of optoinal filters that will be applied when querying the products from the app\n   * database.\n   */\n  where?: WhereFilter[];\n\n  /**\n   * Set to `true` to retrieve the prices along with a product. If not set, the product is\n   * returned with no prices (i.e. {@link Product.prices} field will be empty).\n   */\n  includePrices?: boolean;\n\n  /**\n   * Maximum number of products to return.\n   */\n  limit?: number;\n}\n\nexport { WhereFilterOp } from \"@firebase/firestore\";\n\n/**\n * A filter constraint that can be applied to database queries. Consists of a field name (in\n * Firestore dotted notation), a Firestore filter operator, and a value.\n */\nexport type WhereFilter = [string, WhereFilterOp, any];\n\n/**\n * Retrieves a Stripe product from the database.\n *\n * @param payments - A valid {@link StripePayments} object.\n * @param productId - ID of the product to retrieve.\n * @param options - A set of options to customize the behavior.\n * @returns Resolves with an array of Stripe Product objects. May be empty.\n */\nexport function getProducts(\n  payments: StripePayments,\n  options?: GetProductsOptions\n): Promise<Product[]> {\n  const dao: ProductDAO = getOrInitProductDAO(payments);\n  const { includePrices, ...rest } = options ?? {};\n  return dao.getProducts(rest).then((products: Product[]) => {\n    if (includePrices) {\n      const productsWithPrices: Promise<Product>[] = products.map(\n        (product: Product) => getProductWithPrices(dao, product)\n      );\n      return Promise.all(productsWithPrices);\n    }\n\n    return products;\n  });\n}\n\nasync function getProductWithPrices(\n  dao: ProductDAO,\n  product: Product\n): Promise<Product> {\n  const prices: Price[] = await dao.getPrices(product.id);\n  return { ...product, prices };\n}\n\n/**\n * Retrieves a Stripe price from the database.\n *\n * @param payments - A valid {@link StripePayments} object.\n * @param productId - ID of the product to which the price belongs.\n * @param priceId - ID of the price to retrieve.\n * @returns Resolves with a Stripe Price object if found. Rejects if the specified\n *   product ID or the price ID does not exist.\n */\nexport function getPrice(\n  payments: StripePayments,\n  productId: string,\n  priceId: string\n): Promise<Price> {\n  checkNonEmptyString(productId, \"productId must be a non-empty string.\");\n  checkNonEmptyString(priceId, \"priceId must be a non-empty string.\");\n  const dao: ProductDAO = getOrInitProductDAO(payments);\n  return dao.getPrice(productId, priceId);\n}\n\n/**\n * Retrieves all Stripe prices associated with the specified product.\n *\n * @param payments - A valid {@link StripePayments} object.\n * @param productId - ID of the product to which the prices belong.\n * @returns Resolves with an array of Stripe Price objects. Rejects if the specified\n *   product ID does not exist. If the product exists, but doesn't have any prices, resolves\n *   with the empty array.\n */\nexport function getPrices(\n  payments: StripePayments,\n  productId: string\n): Promise<Price[]> {\n  checkNonEmptyString(productId, \"productId must be a non-empty string.\");\n  const dao: ProductDAO = getOrInitProductDAO(payments);\n  return dao.getPrices(productId, { assertProduct: true });\n}\n\n/**\n * Internal interface for all database interactions pertaining to Stripe products. Exported\n * for testing.\n *\n * @internal\n */\nexport interface ProductDAO {\n  getProduct(productId: string): Promise<Product>;\n  getProducts(options?: {\n    activeOnly?: boolean;\n    where?: WhereFilter[];\n    limit?: number;\n  }): Promise<Product[]>;\n  getPrice(productId: string, priceId: string): Promise<Price>;\n  getPrices(\n    productId: string,\n    options?: { assertProduct?: boolean }\n  ): Promise<Price[]>;\n}\n\nconst PRODUCT_CONVERTER: FirestoreDataConverter<Product> = {\n  toFirestore: () => {\n    throw new Error(\"Not implemented for readonly Product type.\");\n  },\n  fromFirestore: (snapshot: QueryDocumentSnapshot): Product => {\n    return {\n      ...(snapshot.data() as Product),\n      id: snapshot.id,\n      prices: [],\n    };\n  },\n};\n\nconst PRICE_CONVERTER: FirestoreDataConverter<Price> = {\n  toFirestore: () => {\n    throw new Error(\"Not implemented for readonly Price type.\");\n  },\n  fromFirestore: (snapshot: QueryDocumentSnapshot): Price => {\n    const data: DocumentData = snapshot.data();\n    return {\n      ...(data as Price),\n      id: snapshot.id,\n      product: snapshot.ref.parent.parent!.id,\n    };\n  },\n};\n\nclass FirestoreProductDAO implements ProductDAO {\n  private readonly firestore: Firestore;\n\n  constructor(app: FirebaseApp, private readonly productsCollection: string) {\n    this.firestore = getFirestore(app);\n  }\n\n  public async getProduct(productId: string): Promise<Product> {\n    const snap: QueryDocumentSnapshot<Product> =\n      await this.getProductSnapshotIfExists(productId);\n    return snap.data();\n  }\n\n  public async getProducts(options?: {\n    activeOnly?: boolean;\n    where?: WhereFilter[];\n    limit?: number;\n  }): Promise<Product[]> {\n    const querySnap: QuerySnapshot<Product> = await this.getProductSnapshots(\n      options\n    );\n    const products: Product[] = [];\n    querySnap.forEach((snap: QueryDocumentSnapshot<Product>) => {\n      products.push(snap.data());\n    });\n\n    return products;\n  }\n\n  public async getPrice(productId: string, priceId: string): Promise<Price> {\n    const snap: QueryDocumentSnapshot<Price> =\n      await this.getPriceSnapshotIfExists(productId, priceId);\n    return snap.data();\n  }\n\n  public async getPrices(\n    productId: string,\n    options?: { assertProduct?: boolean | undefined }\n  ): Promise<Price[]> {\n    if (options?.assertProduct) {\n      await this.getProductSnapshotIfExists(productId);\n    }\n\n    const querySnap: QuerySnapshot<Price> = await this.getPriceSnapshots(\n      productId\n    );\n    const prices: Price[] = [];\n    querySnap.forEach((snap: QueryDocumentSnapshot<Price>) => {\n      prices.push(snap.data());\n    });\n\n    return prices;\n  }\n\n  private async getProductSnapshotIfExists(\n    productId: string\n  ): Promise<QueryDocumentSnapshot<Product>> {\n    const productRef: DocumentReference<Product> = doc(\n      this.firestore,\n      this.productsCollection,\n      productId\n    ).withConverter(PRODUCT_CONVERTER);\n    const snapshot: DocumentSnapshot<Product> = await this.queryFirestore(() =>\n      getDoc(productRef)\n    );\n    if (!snapshot.exists()) {\n      throw new StripePaymentsError(\n        \"not-found\",\n        `No product found with the ID: ${productId}`\n      );\n    }\n\n    return snapshot;\n  }\n\n  private async getProductSnapshots(options?: {\n    activeOnly?: boolean;\n    where?: WhereFilter[];\n    limit?: number;\n  }): Promise<QuerySnapshot<Product>> {\n    let productsQuery: Query<Product> = collection(\n      this.firestore,\n      this.productsCollection\n    ).withConverter(PRODUCT_CONVERTER);\n    const constraints: QueryConstraint[] = [];\n    if (options?.activeOnly) {\n      constraints.push(where(\"active\", \"==\", true));\n    }\n\n    if (options?.where) {\n      for (const filter of options.where) {\n        constraints.push(where(...filter));\n      }\n    }\n\n    if (typeof options?.limit !== \"undefined\") {\n      constraints.push(limit(options.limit));\n    }\n\n    return await this.queryFirestore(() => {\n      if (constraints.length > 0) {\n        productsQuery = query(productsQuery, ...constraints);\n      }\n\n      return getDocs(productsQuery);\n    });\n  }\n\n  private async getPriceSnapshotIfExists(\n    productId: string,\n    priceId: string\n  ): Promise<QueryDocumentSnapshot<Price>> {\n    const priceRef: DocumentReference<Price> = doc(\n      this.firestore,\n      this.productsCollection,\n      productId,\n      \"prices\",\n      priceId\n    ).withConverter(PRICE_CONVERTER);\n    const snapshot: DocumentSnapshot<Price> = await this.queryFirestore(() =>\n      getDoc(priceRef)\n    );\n    if (!snapshot.exists()) {\n      throw new StripePaymentsError(\n        \"not-found\",\n        `No price found with the product ID: ${productId} and price ID: ${priceId}`\n      );\n    }\n\n    return snapshot;\n  }\n\n  private async getPriceSnapshots(\n    productId: string\n  ): Promise<QuerySnapshot<Price>> {\n    const pricesCollection: CollectionReference<Price> = collection(\n      this.firestore,\n      this.productsCollection,\n      productId,\n      \"prices\"\n    ).withConverter(PRICE_CONVERTER);\n    return await this.queryFirestore(() => getDocs(pricesCollection));\n  }\n\n  private async queryFirestore<T>(fn: () => Promise<T>): Promise<T> {\n    try {\n      return await fn();\n    } catch (error) {\n      throw new StripePaymentsError(\n        \"internal\",\n        \"Unexpected error while querying Firestore\",\n        error\n      );\n    }\n  }\n}\n\nconst PRODUCT_DAO_KEY = \"product-dao\" as const;\n\nfunction getOrInitProductDAO(payments: StripePayments): ProductDAO {\n  let dao: ProductDAO | null =\n    payments.getComponent<ProductDAO>(PRODUCT_DAO_KEY);\n  if (!dao) {\n    dao = new FirestoreProductDAO(payments.app, payments.productsCollection);\n    setProductDAO(payments, dao);\n  }\n\n  return dao;\n}\n\n/**\n * Internal API for registering a {@link ProductDAO} instance with {@link StripePayments}. Exported\n * for testing.\n *\n * @internal\n */\nexport function setProductDAO(payments: StripePayments, dao: ProductDAO): void {\n  payments.setComponent(PRODUCT_DAO_KEY, dao);\n}\n"]}