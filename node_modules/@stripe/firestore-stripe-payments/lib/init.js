/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { registerVersion } from "@firebase/app";
registerVersion("firestore-stripe-payments", "0.0.6");
/**
 * Serves as the main entry point to this library. Initializes the client SDK,
 * and returns a handle object that can be passed into other APIs.
 *
 * @param app - A FirebaseApp instance initialized by the Firebase JS SDK.
 * @param options - Configuration options for the SDK.
 * @returns An instance of the StripePayments class.
 */
export function getStripePayments(app, options) {
    return StripePayments.create(app, options);
}
/**
 * Holds the configuration and other state information of the SDK. An instance of this class
 * must be passed to almost all the other APIs of this library. Do not directly call the
 * constructor. Use the {@link getStripePayments} function to obtain an instance.
 */
export class StripePayments {
    constructor(app, options) {
        this.app = app;
        this.options = options;
        this.components = {};
    }
    /**
     * @internal
     */
    static create(app, options) {
        return new StripePayments(app, options);
    }
    /**
     * Name of the customers collection as configured in the extension.
     */
    get customersCollection() {
        return this.options.customersCollection;
    }
    /**
     * Name of the products collection as configured in the extension.
     */
    get productsCollection() {
        return this.options.productsCollection;
    }
    /**
     * @internal
     */
    getComponent(key) {
        let dao = this.components[key];
        if (dao) {
            return dao;
        }
        return null;
    }
    /**
     * @internal
     */
    setComponent(key, dao) {
        this.components[key] = dao;
    }
}
/**
 * An error thrown by this SDK.
 */
export class StripePaymentsError extends Error {
    constructor(code, message, cause) {
        super(message);
        this.code = code;
        this.message = message;
        this.cause = cause;
    }
}
//# sourceMappingURL=init.js.map