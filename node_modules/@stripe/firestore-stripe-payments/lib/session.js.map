{"version":3,"file":"session.js","sourceRoot":"","sources":["../src/session.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;;;AAGH,OAAO,EACL,MAAM,EACN,UAAU,EAQV,YAAY,EACZ,UAAU,GAIX,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAkB,mBAAmB,EAAE,MAAM,QAAQ,CAAC;AAC7D,OAAO,EAAE,cAAc,EAAE,MAAM,QAAQ,CAAC;AACxC,OAAO,EACL,kBAAkB,EAClB,mBAAmB,EACnB,mBAAmB,GACpB,MAAM,SAAS,CAAC;AAqJjB,SAAS,YAAY,CACnB,MAA2B;IAE3B,OAAO,YAAY,IAAI,MAAM,CAAC;AAChC,CAAC;AAwID,MAAM,CAAC,MAAM,6BAA6B,GAAG,EAAE,GAAG,IAAI,CAAC;AAavD;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,qBAAqB,CACnC,QAAwB,EACxB,MAA2B,EAC3B,OAAsC;IAEtC,MAAM,qBAAQ,MAAM,CAAE,CAAC;IACvB,0BAA0B,CAAC,MAAM,CAAC,CAAC;IACnC,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;QACxB,mBAAmB,CAAC,MAAM,CAAC,CAAC;KAC7B;SAAM;QACL,kBAAkB,CAAC,MAAM,CAAC,CAAC;KAC5B;IAED,MAAM,aAAa,GAAW,gBAAgB,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,CAAC,CAAC;IACvE,OAAO,cAAc,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,GAAW,EAAE,EAAE;QACnD,MAAM,GAAG,GAAe,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QACtD,OAAO,GAAG,CAAC,qBAAqB,CAAC,GAAG,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAS,0BAA0B,CAAC,MAA2B;;IAC7D,IAAI,OAAO,MAAM,CAAC,UAAU,KAAK,WAAW,EAAE;QAC5C,mBAAmB,CACjB,MAAM,CAAC,UAAU,EACjB,wCAAwC,CACzC,CAAC;KACH;SAAM;QACL,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;KAC1C;IAED,MAAA,MAAM,CAAC,IAAI,oCAAX,MAAM,CAAC,IAAI,GAAK,cAAc,EAAC;IAC/B,IAAI,OAAO,MAAM,CAAC,WAAW,KAAK,WAAW,EAAE;QAC7C,mBAAmB,CACjB,MAAM,CAAC,WAAW,EAClB,yCAAyC,CAC1C,CAAC;KACH;SAAM;QACL,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;KAC3C;AACH,CAAC;AAED,SAAS,mBAAmB,CAAC,MAAmC;IAC9D,kBAAkB,CAChB,MAAM,CAAC,UAAU,EACjB,uCAAuC,CACxC,CAAC;AACJ,CAAC;AAED,SAAS,kBAAkB,CAAC,MAAkC;IAC5D,mBAAmB,CAAC,MAAM,CAAC,KAAK,EAAE,mCAAmC,CAAC,CAAC;IACvE,IAAI,OAAO,MAAM,CAAC,QAAQ,KAAK,WAAW,EAAE;QAC1C,mBAAmB,CACjB,MAAM,CAAC,QAAQ,EACf,sCAAsC,CACvC,CAAC;KACH;AACH,CAAC;AAED,SAAS,gBAAgB,CAAC,aAAiC;IACzD,IAAI,OAAO,aAAa,KAAK,WAAW,EAAE;QACxC,mBAAmB,CACjB,aAAa,EACb,0CAA0C,CAC3C,CAAC;QACF,OAAO,aAAa,CAAC;KACtB;IAED,OAAO,6BAA6B,CAAC;AACvC,CAAC;AAgBD,MAAM,mBAAmB;IAGvB,YAAY,GAAgB,EAAmB,mBAA2B;QAA3B,wBAAmB,GAAnB,mBAAmB,CAAQ;QACxE,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAEY,qBAAqB,CAChC,GAAW,EACX,MAA2B,EAC3B,aAAqB;;YAErB,MAAM,GAAG,GAAsB,MAAM,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YACrE,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACnD,CAAC;KAAA;IAEa,aAAa,CACzB,GAAW,EACX,MAA2B;;YAE3B,MAAM,QAAQ,GAAwB,UAAU,CAC9C,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,mBAAmB,EACxB,GAAG,EACH,mBAAmB,CACpB,CAAC;YACF,IAAI;gBACF,OAAO,MAAM,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;aACvC;YAAC,OAAO,GAAG,EAAE;gBACZ,MAAM,IAAI,mBAAmB,CAC3B,UAAU,EACV,iCAAiC,EACjC,GAAG,CACJ,CAAC;aACH;QACH,CAAC;KAAA;IAEO,gBAAgB,CACtB,GAAsB,EACtB,aAAqB;QAErB,IAAI,MAAmB,CAAC;QACxB,OAAO,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC9C,MAAM,OAAO,GAAkC,UAAU,CAAC,GAAG,EAAE;gBAC7D,MAAM,CACJ,IAAI,mBAAmB,CACrB,mBAAmB,EACnB,6CAA6C,CAC9C,CACF,CAAC;YACJ,CAAC,EAAE,aAAa,CAAC,CAAC;YAClB,MAAM,GAAG,UAAU,CACjB,GAAG,CAAC,aAAa,CAAC,iBAAiB,CAAC,EACpC,CAAC,IAAsC,EAAE,EAAE;gBACzC,MAAM,OAAO,GAA+B,IAAI,CAAC,IAAI,EAAE,CAAC;gBACxD,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE;oBACzB,YAAY,CAAC,OAAO,CAAC,CAAC;oBACtB,OAAO,CAAC,OAAO,CAAC,CAAC;iBAClB;YACH,CAAC,EACD,CAAC,GAAmB,EAAE,EAAE;gBACtB,YAAY,CAAC,OAAO,CAAC,CAAC;gBACtB,MAAM,CACJ,IAAI,mBAAmB,CACrB,UAAU,EACV,iCAAiC,EACjC,GAAG,CACJ,CACF,CAAC;YACJ,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;IAC7B,CAAC;CACF;AAID,SAAS,YAAY,CAAC,OAAmC;IACvD,OAAO,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,EAAE,CAAA,KAAK,WAAW,CAAC;AAC5C,CAAC;AAED,MAAM,iBAAiB,GAA2C;IAChE,WAAW,EAAE,GAAiB,EAAE;QAC9B,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAChE,CAAC;IACD,aAAa,EAAE,CAAC,QAA+B,EAAkB,EAAE;QACjE,MAAM,KAAkC,QAAQ,CAAC,IAAI,EAAE,EAAjD,EAAE,OAAO,EAAE,SAAS,OAA6B,EAAxB,IAAI,cAA7B,wBAA+B,CAAkB,CAAC;QACxD,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;YACpC,uCACM,IAAgB,KACpB,EAAE,EAAE,SAAS,EACb,UAAU,EAAE,eAAe,CAAC,OAAO,CAAC,IACpC;SACH;QAED,yBAAa,IAAgB,EAAG;IAClC,CAAC;CACF,CAAC;AAEF,SAAS,eAAe,CAAC,SAAoB;IAC3C,OAAO,SAAS,CAAC,MAAM,EAAE,CAAC,WAAW,EAAE,CAAC;AAC1C,CAAC;AAED,MAAM,eAAe,GAAG,sBAA+B,CAAC;AAExD,SAAS,mBAAmB,CAAC,QAAwB;IACnD,IAAI,GAAG,GACL,QAAQ,CAAC,YAAY,CAAa,eAAe,CAAC,CAAC;IACrD,IAAI,CAAC,GAAG,EAAE;QACR,GAAG,GAAG,IAAI,mBAAmB,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QAC1E,aAAa,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;KAC9B;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,aAAa,CAAC,QAAwB,EAAE,GAAe;IACrE,QAAQ,CAAC,YAAY,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;AAC9C,CAAC","sourcesContent":["/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from \"@firebase/app\";\nimport {\n  addDoc,\n  collection,\n  CollectionReference,\n  DocumentData,\n  DocumentReference,\n  DocumentSnapshot,\n  Firestore,\n  FirestoreDataConverter,\n  FirestoreError,\n  getFirestore,\n  onSnapshot,\n  QueryDocumentSnapshot,\n  Timestamp,\n  Unsubscribe,\n} from \"@firebase/firestore\";\nimport { StripePayments, StripePaymentsError } from \"./init\";\nimport { getCurrentUser } from \"./user\";\nimport {\n  checkNonEmptyArray,\n  checkNonEmptyString,\n  checkPositiveNumber,\n} from \"./utils\";\n\n/**\n * Parameters common across all session types.\n */\nexport interface CommonSessionCreateParams {\n  /**\n   * Enables user redeemable promotion codes.\n   */\n  allow_promotion_codes?: boolean;\n\n  /**\n   * Set to true to enable automatic taxes. Defaults to false.\n   */\n  automatic_tax?: boolean;\n\n  /**\n   * A unique string to reference the Checkout Session. This can be a customer ID, a cart ID,\n   * or similar, and can be used to reconcile the session with your internal systems.\n   */\n  client_reference_id?: string;\n\n  /**\n   * The URL the customer will be directed to if they decide to cancel payment and return to\n   * your website.\n   */\n  cancel_url?: string;\n\n  /**\n   * Set of key-value pairs that you can attach to an object. This can be useful for storing\n   * additional information about the object in a structured format.\n   */\n  metadata?: { [key: string]: any };\n\n  /**\n   * The mode of the Checkout Session. If not specified defaults to `subscription`.\n   */\n  mode?: \"subscription\" | \"payment\";\n\n  /**\n   * A list of the types of payment methods (e.g., `card`) this Checkout Session can accept.\n   * Defaults to `[\"card\"]`.\n   */\n  payment_method_types?: PaymentMethodType[];\n\n  /**\n   * The promotion code to apply to this Session.\n   */\n  promotion_code?: string;\n\n  /**\n   * The URL to which Stripe should send customers when payment or setup is complete.\n   */\n  success_url?: string;\n\n  /**\n   * Controls tax ID collection settings for the session.\n   */\n  tax_id_collection?: boolean;\n\n  /**\n   * Indicates if a planâ€™s `trial_period_days` should be applied to the subscription. Defaults\n   * to `true`.\n   */\n  trial_from_plan?: boolean;\n}\n\n/**\n * Supported payment methods.\n */\nexport type PaymentMethodType =\n  | \"card\"\n  | \"acss_debit\"\n  | \"afterpay_clearpay\"\n  | \"alipay\"\n  | \"bacs_debit\"\n  | \"bancontact\"\n  | \"boleto\"\n  | \"eps\"\n  | \"fpx\"\n  | \"giropay\"\n  | \"grabpay\"\n  | \"ideal\"\n  | \"klarna\"\n  | \"oxxo\"\n  | \"p24\"\n  | \"sepa_debit\"\n  | \"sofort\"\n  | \"wechat_pay\";\n\n/**\n * Parameters for createing a session with one or more line items.\n */\nexport interface LineItemSessionCreateParams extends CommonSessionCreateParams {\n  line_items: LineItemParams[];\n}\n\n/**\n * Parameters common across all line item types.\n */\nexport interface CommonLineItemParams {\n  /**\n   * The description for the line item, to be displayed on the Checkout page.\n   */\n  description?: string;\n\n  /**\n   * The quantity of the line item being purchased.\n   */\n  quantity?: number;\n}\n\n/**\n * Parameters for createing a line item with a Stripe price ID.\n */\nexport interface PriceIdLineItemParams extends CommonLineItemParams {\n  /**\n   * The ID of the Stripe price.\n   */\n  price: string;\n}\n\n/**\n * Parameters for creating a new line item.\n */\nexport type LineItemParams = PriceIdLineItemParams;\n\n/**\n * Parameters for createing a session with a Stripe price ID.\n */\nexport interface PriceIdSessionCreateParams extends CommonSessionCreateParams {\n  /**\n   * The ID of the Stripe price.\n   */\n  price: string;\n\n  /**\n   * The quantity of the item being purchased. Defaults to 1.\n   */\n  quantity?: number;\n}\n\n/**\n * Parameters for creating a new session.\n */\nexport type SessionCreateParams =\n  | LineItemSessionCreateParams\n  | PriceIdSessionCreateParams;\n\nfunction hasLineItems(\n  params: SessionCreateParams\n): params is LineItemSessionCreateParams {\n  return \"line_items\" in params;\n}\n\n/**\n * Interface of Stripe checkout session.\n */\nexport interface Session {\n  /**\n   * The URL the customer will be directed to if they decide to cancel payment and return to\n   * your website.\n   */\n  readonly cancel_url: string;\n\n  /**\n   * Time when the session was created as a UTC timestamp.\n   */\n  readonly created_at: string;\n\n  /**\n   * Unique identifier for the session. Used to pass to `redirectToCheckout()` in Stripe.js.\n   */\n  readonly id: string;\n\n  /**\n   * The mode of the Checkout Session.\n   */\n  readonly mode: \"subscription\" | \"payment\";\n\n  /**\n   * The URL to which Stripe should send customers when payment or setup is complete.\n   */\n  readonly success_url: string;\n\n  /**\n   * The URL to the Checkout Session. Redirect the user to this URL to complete the payment.\n   */\n  readonly url: string;\n\n  /**\n   * Enables user redeemable promotion codes.\n   */\n  readonly allow_promotion_codes?: boolean;\n\n  /**\n   * Indicates whether automatic tax is enabled for the session\n   */\n  readonly automatic_tax?: boolean;\n\n  /**\n   * A unique string to reference the Checkout Session. This can be a customer ID, a cart ID,\n   * or similar, and can be used to reconcile the session with your internal systems.\n   */\n  readonly client_reference_id?: string;\n\n  /**\n   * The array of line items purchased with this session. A session is guaranteed to contain either\n   * {@link Session.line_items} or {@link Session.price}.\n   */\n  readonly line_items?: LineItem[];\n\n  /**\n   * Set of key-value pairs that you can attach to an object. This can be useful for storing\n   * additional information about the object in a structured format.\n   */\n  readonly metadata?: { [key: string]: any };\n\n  /**\n   * A list of the types of payment methods (e.g., `card`) this Checkout Session can accept.\n   * Defaults to `[\"card\"]`.\n   */\n  readonly payment_method_types?: PaymentMethodType[];\n\n  /**\n   * The ID of the Stripe price object purchased with this session. A session is guaranteed to\n   * contain either {@link Session.line_items} or {@link Session.price}.\n   */\n  readonly price?: string;\n\n  /**\n   * The promotion code to apply to this Session.\n   */\n  readonly promotion_code?: string;\n\n  /**\n   * The quantity of item purchased. Defaults to 1.\n   */\n  readonly quantity?: number;\n\n  /**\n   * Controls tax ID collection settings for the session.\n   */\n  readonly tax_id_collection?: boolean;\n\n  /**\n   * Indicates if a planâ€™s `trial_period_days` should be applied to the subscription. Defaults\n   * to `true`.\n   */\n  readonly trial_from_plan?: boolean;\n}\n\n/**\n * Interface of a Stripe line item associated with a checkout session. A line item represents\n * an individual item purchased using the session.\n */\nexport interface LineItem {\n  /**\n   * The amount to be collected per unit of the line item.\n   */\n  amount?: number;\n\n  /**\n   * Three-letter {@link https://www.iso.org/iso-4217-currency-codes.html | ISO currency code},\n   * in lowercase. Must be a {@link https://stripe.com/docs/currencies | supported currency}.\n   */\n  currency?: string;\n\n  /**\n   * The description for the line item, to be displayed on the Checkout page.\n   */\n  description?: string;\n\n  /**\n   * The name for the item to be displayed on the Checkout page.\n   */\n  name?: string;\n\n  /**\n   * The ID of the Stripe price.\n   */\n  price?: string;\n\n  /**\n   * The quantity of the line item being purchased.\n   */\n  quantity?: number;\n}\n\nexport const CREATE_SESSION_TIMEOUT_MILLIS = 30 * 1000;\n\n/**\n * Optional settings for the {@link createCheckoutSession} function.\n */\nexport interface CreateCheckoutSessionOptions {\n  /**\n   * Time to wait (in milliseconds) until the session is created and acknowledged by  Stripe.\n   * If not specified, defaults to {@link CREATE_SESSION_TIMEOUT_MILLIS}.\n   */\n  timeoutMillis?: number;\n}\n\n/**\n * Creates a new Stripe checkout session with the given parameters. Returned session contains a\n * session ID and a session URL that can be used to redirect the user to complete the checkout.\n * User must be currently signed in with Firebase Auth to call this API. If a timeout occurs\n * while waiting for the session to be created and acknowledged by Stripe, rejects with a\n * `deadline-exceeded` error. Default timeout duration is {@link CREATE_SESSION_TIMEOUT_MILLIS}.\n *\n * @param payments - A valid {@link StripePayments} object.\n * @param params - Parameters of the checkout session.\n * @param options - Optional settings to customize the behavior.\n * @returns Resolves with the created Stripe Session object.\n */\nexport function createCheckoutSession(\n  payments: StripePayments,\n  params: SessionCreateParams,\n  options?: CreateCheckoutSessionOptions\n): Promise<Session> {\n  params = { ...params };\n  checkAndUpdateCommonParams(params);\n  if (hasLineItems(params)) {\n    checkLineItemParams(params);\n  } else {\n    checkPriceIdParams(params);\n  }\n\n  const timeoutMillis: number = getTimeoutMillis(options?.timeoutMillis);\n  return getCurrentUser(payments).then((uid: string) => {\n    const dao: SessionDAO = getOrInitSessionDAO(payments);\n    return dao.createCheckoutSession(uid, params, timeoutMillis);\n  });\n}\n\nfunction checkAndUpdateCommonParams(params: SessionCreateParams): void {\n  if (typeof params.cancel_url !== \"undefined\") {\n    checkNonEmptyString(\n      params.cancel_url,\n      \"cancel_url must be a non-empty string.\"\n    );\n  } else {\n    params.cancel_url = window.location.href;\n  }\n\n  params.mode ??= \"subscription\";\n  if (typeof params.success_url !== \"undefined\") {\n    checkNonEmptyString(\n      params.success_url,\n      \"success_url must be a non-empty string.\"\n    );\n  } else {\n    params.success_url = window.location.href;\n  }\n}\n\nfunction checkLineItemParams(params: LineItemSessionCreateParams): void {\n  checkNonEmptyArray(\n    params.line_items,\n    \"line_items must be a non-empty array.\"\n  );\n}\n\nfunction checkPriceIdParams(params: PriceIdSessionCreateParams): void {\n  checkNonEmptyString(params.price, \"price must be a non-empty string.\");\n  if (typeof params.quantity !== \"undefined\") {\n    checkPositiveNumber(\n      params.quantity,\n      \"quantity must be a positive integer.\"\n    );\n  }\n}\n\nfunction getTimeoutMillis(timeoutMillis: number | undefined): number {\n  if (typeof timeoutMillis !== \"undefined\") {\n    checkPositiveNumber(\n      timeoutMillis,\n      \"timeoutMillis must be a positive number.\"\n    );\n    return timeoutMillis;\n  }\n\n  return CREATE_SESSION_TIMEOUT_MILLIS;\n}\n\n/**\n * Internal interface for all database interactions pertaining to Stripe sessions. Exported\n * for testing.\n *\n * @internal\n */\nexport interface SessionDAO {\n  createCheckoutSession(\n    uid: string,\n    params: SessionCreateParams,\n    timeoutMillis: number\n  ): Promise<Session>;\n}\n\nclass FirestoreSessionDAO implements SessionDAO {\n  private readonly firestore: Firestore;\n\n  constructor(app: FirebaseApp, private readonly customersCollection: string) {\n    this.firestore = getFirestore(app);\n  }\n\n  public async createCheckoutSession(\n    uid: string,\n    params: SessionCreateParams,\n    timeoutMillis: number\n  ): Promise<Session> {\n    const doc: DocumentReference = await this.addSessionDoc(uid, params);\n    return this.waitForSessionId(doc, timeoutMillis);\n  }\n\n  private async addSessionDoc(\n    uid: string,\n    params: SessionCreateParams\n  ): Promise<DocumentReference> {\n    const sessions: CollectionReference = collection(\n      this.firestore,\n      this.customersCollection,\n      uid,\n      \"checkout_sessions\"\n    );\n    try {\n      return await addDoc(sessions, params);\n    } catch (err) {\n      throw new StripePaymentsError(\n        \"internal\",\n        \"Error while querying Firestore.\",\n        err\n      );\n    }\n  }\n\n  private waitForSessionId(\n    doc: DocumentReference,\n    timeoutMillis: number\n  ): Promise<Session> {\n    let cancel: Unsubscribe;\n    return new Promise<Session>((resolve, reject) => {\n      const timeout: ReturnType<typeof setTimeout> = setTimeout(() => {\n        reject(\n          new StripePaymentsError(\n            \"deadline-exceeded\",\n            \"Timeout while waiting for session response.\"\n          )\n        );\n      }, timeoutMillis);\n      cancel = onSnapshot(\n        doc.withConverter(SESSION_CONVERTER),\n        (snap: DocumentSnapshot<PartialSession>) => {\n          const session: PartialSession | undefined = snap.data();\n          if (hasSessionId(session)) {\n            clearTimeout(timeout);\n            resolve(session);\n          }\n        },\n        (err: FirestoreError) => {\n          clearTimeout(timeout);\n          reject(\n            new StripePaymentsError(\n              \"internal\",\n              \"Error while querying Firestore.\",\n              err\n            )\n          );\n        }\n      );\n    }).finally(() => cancel());\n  }\n}\n\ntype PartialSession = Partial<Session>;\n\nfunction hasSessionId(session: PartialSession | undefined): session is Session {\n  return typeof session?.id !== \"undefined\";\n}\n\nconst SESSION_CONVERTER: FirestoreDataConverter<PartialSession> = {\n  toFirestore: (): DocumentData => {\n    throw new Error(\"Not implemented for readonly Session type.\");\n  },\n  fromFirestore: (snapshot: QueryDocumentSnapshot): PartialSession => {\n    const { created, sessionId, ...rest } = snapshot.data();\n    if (typeof sessionId !== \"undefined\") {\n      return {\n        ...(rest as Session),\n        id: sessionId,\n        created_at: toUTCDateString(created),\n      };\n    }\n\n    return { ...(rest as Session) };\n  },\n};\n\nfunction toUTCDateString(timestamp: Timestamp): string {\n  return timestamp.toDate().toUTCString();\n}\n\nconst SESSION_DAO_KEY = \"checkout-session-dao\" as const;\n\nfunction getOrInitSessionDAO(payments: StripePayments): SessionDAO {\n  let dao: SessionDAO | null =\n    payments.getComponent<SessionDAO>(SESSION_DAO_KEY);\n  if (!dao) {\n    dao = new FirestoreSessionDAO(payments.app, payments.customersCollection);\n    setSessionDAO(payments, dao);\n  }\n\n  return dao;\n}\n\n/**\n * Internal API for registering a {@link SessionDAO} instance with {@link StripePayments}.\n * Exported for testing.\n *\n * @internal\n */\nexport function setSessionDAO(payments: StripePayments, dao: SessionDAO): void {\n  payments.setComponent(SESSION_DAO_KEY, dao);\n}\n"]}