/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { getAuth } from "@firebase/auth";
import { StripePaymentsError } from "./init";
/**
 * Internal API for retrieving the currently signed in user. Rejects with "unauthenticated" if
 * the user is not signed in. Exposed for internal use.
 *
 * @internal
 */
export function getCurrentUser(payments) {
    try {
        const uid = getCurrentUserSync(payments);
        return Promise.resolve(uid);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
/**
 * Internal API for retrieving the currently signed in user. Throws "unauthenticated" if
 * the user is not signed in. Exposed for internal use.
 *
 * @internal
 */
export function getCurrentUserSync(payments) {
    const dao = getOrInitUserDAO(payments);
    return dao.getCurrentUser();
}
class FirebaseAuthUserDAO {
    constructor(app) {
        this.auth = getAuth(app);
    }
    getCurrentUser() {
        var _a;
        const currentUser = (_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid;
        if (!currentUser) {
            throw new StripePaymentsError("unauthenticated", "Failed to determine currently signed in user. User not signed in.");
        }
        return currentUser;
    }
}
const USER_DAO_KEY = "user-dao";
function getOrInitUserDAO(payments) {
    let dao = payments.getComponent(USER_DAO_KEY);
    if (!dao) {
        dao = new FirebaseAuthUserDAO(payments.app);
        setUserDAO(payments, dao);
    }
    return dao;
}
/**
 * Internal API for registering a {@link UserDAO} instance with {@link StripePayments}.
 * Exported for testing.
 *
 * @internal
 */
export function setUserDAO(payments, dao) {
    payments.setComponent(USER_DAO_KEY, dao);
}
//# sourceMappingURL=user.js.map